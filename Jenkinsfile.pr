#!/usr/bin/env groovy

/* Only keep the 10 most recent builds. */
// def projectProperties = [
//     [$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', numToKeepStr: '5']],
//     [$class: 'GithubProjectProperty', projectUrl: 'https://github.com/kiall/android-tvheadend/', displayName: ''],
//     [$class: 'PipelineTriggersJobProperty', triggers: [
//             [$class: 'GitHubPRTrigger', triggerMode: 'HEAVY_HOOKS', spec: 'H/5 * * * *', cancelQueued: true, abortRunning: true, skipFirstRun: false, preStatus: true, events: [
//                 [$class: 'GitHubPROpenEvent'],
//                 [$class: 'GitHubPRCommitEvent'],
//                 [$class: 'GitHubPRCommentEvent', comment: "recheck"],
//             ]]
//     ]],
//     [$class: 'DisableConcurrentBuildsJobProperty'],
// ]

// properties(projectProperties)

node ('android-slave') {
    stage('Preparation') {
        step([$class: 'WsCleanup'])
        checkout scm
    }

    def common = load 'Jenkinsfile.groovy'
    def appVersionCode = common.getAppVersionCode()

    common.withGithubNotifier {
        withEnv(["APP_VERSION_CODE=${appVersionCode}"]) {
            stage('Assemble') {
                setGitHubPullRequestStatus state: 'PENDING', context: "${env.JOB_NAME}", message: "Assemble"
                withCredentials([
                    [$class: 'FileBinding', credentialsId: 'android-keystore-tvheadend', variable: 'ANDROID_KEYSTORE'],
                    [$class: 'StringBinding', credentialsId: 'android-keystore-tvheadend-password', variable: 'ANDROID_KEYSTORE_PASSWORD'],
                    [$class: 'StringBinding', credentialsId: 'acra-report-uri-tvheadend', variable: 'ACRA_REPORT_URI'],
                ]) {
                    writeFile file: 'keystore.properties', text: "storeFile=$ANDROID_KEYSTORE\nstorePassword=$ANDROID_KEYSTORE_PASSWORD\nkeyAlias=Kiall Mac Innes\nkeyPassword=$ANDROID_KEYSTORE_PASSWORD\n"
                    writeFile file: 'acra.properties', text: "report_uri=$ACRA_REPORT_URI\n"

                    common.assemble()
                }
            }
            stage('Lint') {
               setGitHubPullRequestStatus state: 'PENDING', context: "${env.JOB_NAME}", message: "Lint"
                common.lint()
            }
        }
    }
}
